
import os
import re

import cmarkgfm
from bs4 import BeautifulSoup
from cmarkgfm.cmark import Options as cmarkgfmOptions
from jinja2 import Environment, FileSystemLoader, select_autoescape

from src.webgoose.config import config
from src.webgoose.page_factory import PageFactory


class PageRenderer():


    def __init__(self, page: PageFactory.Page):

        """ Initialises A PageRenderer Instance With A Page Object (Generated by PageFactory) """

        self._page = page



    # ==============
    # Public Methods
    # ==============

    def render(self):
        
        """ Public Function For Building A Markup File From A Page Object """

        mod_content = self._markup_source(self._page.content)

        full_page = self._render_template(self._page.template, self._page.metadata, mod_content)

        self._write_build_to_file(self._page, full_page)



    
    # ===============
    # Private Methods 
    # ===============

    def _markup_source(self, content: str) -> str:

        """ Convert Markdown Content to Markup Using Cmark-GFM """

        # (files are generated locally, so no real issues with XSS, etc)
        cmark_options = cmarkgfmOptions.CMARK_OPT_UNSAFE
        return cmarkgfm.github_flavored_markdown_to_html(content, cmark_options)




    def _render_template(self, template: str, metadata: dict, content: str) -> str:

        """ Spit Content Out On To Template, Return Full HTML Page """

        # Setup Jinja2 Environment, Pass Template Directory For Configuration File
        jinja_env = Environment(
            loader=FileSystemLoader(config['build']['template-dir']),
            autoescape=select_autoescape(
                default_for_string = False,
                default = False
            )
        )

        # Create Template Object From Template String
        template = jinja_env.from_string(template)

        # Render Page, Pass Metadata Dict To Jinja2, Process Macros On Template
        return template.render({"meta": metadata, "content": content})




    def _process_macros(self, page, template, content):

        """ Wrapper Function To Process Macros on Content and Template """

        # Process Macros On Page Content
        pre_processor = MacroProcessor(page, content)
        content = pre_processor.process()
        
        # Process Macros On Template, Using Content As Reference
        pre_processor = MacroProcessor(page, template, content)
        template = pre_processor.process()


        return template, content




    def _write_build_to_file(self, page, markup):

        """ Write Final Page To File (or any string technically) """

        # If The Build Path Doesn't Exist, Make It !!
        if not os.path.exists(os.path.dirname(page.build_path)):

            os.makedirs(os.path.dirname(page.build_path))


        # Write Build To File, Properly Indent/Neaten Up Markup Using BeautifulSoup
        with open(page.build_path, "w", encoding="utf-8") as file:

            soup = BeautifulSoup(markup, "html.parser")

            file.write(soup.prettify(formatter="html"))

    
    