
# Parent Page Class
class PageFactory():

	# Page Subclass
	class Page():
		
		# (All Instance Vars Private)
		- constructor		
		-> __page_metadata
		-> __page_content
		-> __page_template
		-> __page_filename
		-> __page_source_path
		-> __page_build_path
		
		:Public Methods:

		{Read-Only Properties For All Instance Vars}




	- constructor 
	-> (private)takes a path to source markdown file

	
	:Public Methods:
	- get_page() 
	-> returns a page object containing all page information


	:Private Methods:
	- __get_source_content()
	-> Opens Source File from path, returns frontmatter.load(opened_file)

	- __get_template()
	-> returns page template as a string
	
	- __get_filename()
	-> extracts filename from path

	- __get_build_path()
	-> gets build path using source path

	- __add_missing_metadata()
	-> uses page content, config, & source file info to fill in missing metadata

	- __source_file_exists()
	-> checks whether provided Source File exists and is valid





class PageRenderer():

	- constructor
	-> (private) takes a Page object

	
	:Public Methods:
	- render()
	-> renders a page from the given Page Object
	
	
	:Private Methods:
	- __process_macros()
	-> processes macros on the page content and template

	- __markup_source()
	-> converts source markdown to markup

	- __render_template()
	-> spits everything out onto the template, returns prettified markup of whole page

	- __write_build_to_file()
	-> writes final markup to Build Path


	